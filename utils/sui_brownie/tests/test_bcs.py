# @Time    : 2023/3/31 01:04
# @Author  : WeiDai
# @FileName: test_bcs.py
import unittest
from bcs import *


class Test(unittest.TestCase):
    def test_bool_true(self):
        in_value = True
        assert Bool(in_value).encode == b'\x01'

    def test_bool_false(self):
        in_value = False
        assert Bool(in_value).encode == b'\x00'

    def test_str(self):
        in_value = "1234567890"
        assert Identifier(in_value).encode == bytes([len(in_value)]) + b"1234567890"

    def test_u8(self):
        in_value = 1
        assert U8(in_value).encode == b"\x01"

    def test_u16(self):
        in_value = 11115
        assert U16(in_value).encode == b'k+'

    def test_u32(self):
        in_value = 1111111115

        assert U32(in_value).encode == b'\xcb5:B'

    def test_u64(self):
        in_value = 1111111111111111115

        assert U64(in_value).encode == b'\xcbq\xc4+\xabuk\x0f'

    def test_u128(self):
        in_value = 1111111111111111111111111111111111115

        assert U128(in_value).encode == b'\xcbq\x1c\xc7\x11\x06T\x8e4]\xdf\xde\x01\xfe\xd5\x00'

    def test_u256(self):
        in_value = 111111111111111111111111111111111111111111111111111111111111111111111111111115

        expect = b'\xcbq\x1c\xc7q\x1c\xc7q\x1c\x07\xea&\x97\xa57h\xb7\x05d\xa4Y\x10&R\x14*3n\x07\xa9\xa6\xf5'
        assert U256(in_value).encode == expect
        print(list(uleb128(275)))

    def test_sui_address(self):
        in_value = "0x8db1ed88ba0a1cb02286c0b52d362861a8577590ec024fdde0c29efccbcac5e3"
        sui_address = SuiAddress(in_value)
        expect = b'\x8d\xb1\xed\x88\xba\n\x1c\xb0"\x86\xc0\xb5-6(a\xa8Wu\x90\xec\x02O\xdd\xe0\xc2\x9e\xfc\xcb\xca\xc5\xe3'
        assert sui_address.encode == expect
        return sui_address

    def test_object_digest(self):
        in_value = "4q49qZdCaTzeU2BP4mfQesc2dbt3h32Qn2rLHHwrBJne"
        digest = ObjectDigest(in_value)
        expect = b" 8\xe2\x81\x06\xa0B\x06fRs2F'\xa3H\xeb\xcdl\xa872##X\xb2i\xec\x1d\x89y\xb4\x1b"
        assert digest.encode == expect
        return digest

    def test_gas_data(self):
        payment = [ObjectRef(
            ObjectID("0xd735f90712e6c9a4d385713aa213be92e800b1df1333ef35ac414c7cac56f002"),
            SequenceNumber(2),
            self.test_object_digest()
        )]
        owner = self.test_sui_address()
        price = U64(1)
        budget = U64(10000)
        gas_data = GasData(payment, owner, price, budget)
        actual = gas_data.encode
        expect = b'\x01\xd75\xf9\x07\x12\xe6\xc9\xa4\xd3\x85q:\xa2\x13\xbe\x92\xe8\x00\xb1\xdf\x133\xef5\xacAL|\xacV\xf0\x02\x02\x00\x00\x00\x00\x00\x00\x00 8\xe2\x81\x06\xa0B\x06fRs2F\'\xa3H\xeb\xcdl\xa872##X\xb2i\xec\x1d\x89y\xb4\x1b\x8d\xb1\xed\x88\xba\n\x1c\xb0"\x86\xc0\xb5-6(a\xa8Wu\x90\xec\x02O\xdd\xe0\xc2\x9e\xfc\xcb\xca\xc5\xe3\x01\x00\x00\x00\x00\x00\x00\x00\x10\'\x00\x00\x00\x00\x00\x00'
        assert actual == expect, f"{len(actual)} -- {len(expect)}"
        return gas_data

    def test_transaction_expiration(self):
        in_value = "NONE"
        transaction_expiration = TransactionExpiration(in_value, NONE())
        assert transaction_expiration.encode == b"\x00"
        return transaction_expiration

    def test_transaction_kind(self):
        inputs = [
            CallArg("Object",
                    ObjectArg("ImmOrOwnedObject",
                              ObjectRef(ObjectID("0x12fd321066bf30c275448ab427d5ee0e3e644bfda218863258959e1a0b4862b9"),
                                        SequenceNumber(2),
                                        ObjectDigest("ArbYLU97E8brFASUzawSTQ2NgKEVJWsq6V5pfQh63SFo")
                                        )
                              )),
            CallArg("Pure", Pure([0])),
            CallArg("Pure", Pure(
                [32, 1, 76, 89, 169, 156, 204, 86, 11, 170, 102, 207, 133, 40, 85, 120, 207, 126, 45, 25, 252, 104, 195,
                 34, 48, 19, 4, 131, 113, 54, 122, 179, 72])),
        ]
        commands = [
            Command("MoveCall", ProgrammableMoveCall(
                ObjectID("0x2"),
                Identifier("package"),
                Identifier("authorize_upgrade"),
                [],
                [Argument("Input", U16(0)), Argument("Input", U16(1)), Argument("Input", U16(2))]
            )),
            Command("Upgrade", Upgrade(
                [[161, 28, 235, 11, 6, 0, 0, 0, 9, 1, 0, 2, 2, 2, 12, 3, 14, 20, 5, 34, 6, 7, 40, 71, 8, 111, 32, 10,
                  143, 1, 16, 12, 159, 1, 74, 15, 233, 1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 9, 0, 1, 0, 0,
                  8, 1, 1, 0, 0, 5, 1, 1, 0, 0, 7, 2, 1, 0, 0, 1, 3, 2, 1, 3, 1, 65, 1, 66, 4, 98, 97, 115, 101, 2, 102,
                  49, 2, 102, 50, 10, 102, 114, 105, 101, 110, 100, 95, 102, 117, 110, 13, 102, 114, 105, 101, 110, 100,
                  95, 109, 111, 100, 117, 108, 101, 14, 110, 111, 110, 95, 112, 117, 98, 108, 105, 99, 95, 102, 117,
                  110, 6, 112, 108, 117, 115, 95, 49, 8, 114, 101, 116, 117, 114, 110, 95, 48, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 4, 9, 0, 1, 2,
                  2, 3, 1, 4, 9, 0, 0, 1, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 4, 11, 0, 6, 1, 0, 0,
                  0, 0, 0, 0, 0, 22, 2, 2, 3, 0, 0, 0, 2, 11, 0, 2, 3, 0, 0, 0, 1, 9, 11, 0, 4, 5, 6, 0, 0, 0, 0, 0, 0,
                  0, 0, 12, 2, 5, 7, 11, 1, 12, 2, 11, 2, 2, 0, 6, 0],
                 [161, 28, 235, 11, 6, 0, 0, 0, 8, 1, 0, 4, 2, 4, 6, 3, 10, 25, 5, 35, 3, 7, 38, 89, 8, 127, 32, 10,
                  159, 1, 8, 12, 167, 1, 62, 0, 6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 9, 0, 1, 0, 0, 7, 1, 1, 0,
                  0, 8, 1, 1, 0, 1, 5, 1, 1, 0, 0, 1, 3, 1, 65, 4, 98, 97, 115, 101, 6, 102, 105, 101, 108, 100, 49, 6,
                  102, 105, 101, 108, 100, 50, 11, 102, 114, 105, 101, 110, 100, 95, 99, 97, 108, 108, 10, 102, 114,
                  105, 101, 110, 100, 95, 102, 117, 110, 13, 102, 114, 105, 101, 110, 100, 95, 109, 111, 100, 117, 108,
                  101, 14, 110, 111, 110, 95, 112, 117, 98, 108, 105, 99, 95, 102, 117, 110, 6, 112, 108, 117, 115, 95,
                  49, 8, 114, 101, 116, 117, 114, 110, 95, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 9, 0, 0, 1, 0, 0, 0, 3, 6, 1, 0, 0, 0, 0, 0,
                  0, 0, 17, 4, 2, 1, 1, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 11, 0, 2, 3, 1, 0,
                  0, 0, 4, 11, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 22, 2, 0],
                 [161, 28, 235, 11, 6, 0, 0, 0, 6, 1, 0, 4, 3, 4, 15, 5, 19, 3, 7, 22, 112, 8, 134, 1, 32, 12, 166, 1,
                  16, 0, 3, 0, 1, 0, 4, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 3, 11, 102, 114, 105, 101, 110,
                  100, 95, 99, 97, 108, 108, 13, 102, 114, 105, 101, 110, 100, 95, 109, 111, 100, 117, 108, 101, 53,
                  105, 95, 99, 97, 110, 95, 99, 97, 108, 108, 95, 102, 117, 110, 115, 95, 105, 110, 95, 111, 116, 104,
                  101, 114, 95, 109, 111, 100, 117, 108, 101, 115, 95, 116, 104, 97, 116, 95, 97, 108, 114, 101, 97,
                  100, 121, 95, 101, 120, 105, 115, 116, 101, 100, 10, 110, 101, 119, 95, 109, 111, 100, 117, 108, 101,
                  20, 116, 104, 105, 115, 95, 105, 115, 95, 97, 95, 110, 101, 119, 95, 109, 111, 100, 117, 108, 101, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                  0, 0, 1, 2, 1, 1, 0, 0, 0, 2, 17, 2, 2, 0]],
                [],
                ObjectID("0x01358eb84d68b5cd0e9ceab01db7b80895a41cccafa8a6e631d2ee837c70dee8"),
                Argument("Result", U16(0)),
            )),
            Command("MoveCall", ProgrammableMoveCall(
                ObjectID("0x2"),
                Identifier("package"),
                Identifier("commit_upgrade"),
                [],
                [Argument("Input", U16(0)), Argument("Result", U16(1))]
            )),
        ]
        programmable_transaction = ProgrammableTransaction(inputs, commands)
        transaction_data_v1 = TransactionDataV1(TransactionKind("ProgrammableTransaction", programmable_transaction),
                                                self.test_sui_address(),
                                                self.test_gas_data(),
                                                self.test_transaction_expiration()
                                                )
        transaction_data = TransactionData("V1", transaction_data_v1)
        msg = IntentMessage(Intent(IntentScope("TransactionData", NONE()),
                                   IntentVersion("V0", NONE()),
                                   AppId("Sui", NONE())),
                            transaction_data
                            )
        actual = msg.encode
        expect = [0, 0, 0, 0, 0, 3, 1, 0, 18, 253, 50, 16, 102, 191, 48, 194, 117, 68, 138, 180, 39, 213, 238, 14, 62,
                  100, 75, 253, 162, 24, 134, 50, 88, 149, 158, 26, 11, 72, 98, 185, 2, 0, 0, 0, 0, 0, 0, 0, 32, 146,
                  109, 178, 96, 204, 105, 58, 128, 91, 3, 87, 5, 99, 7, 225, 103, 71, 233, 0, 254, 206, 191, 170, 7,
                  167, 73, 137, 98, 5, 178, 240, 62, 0, 1, 0, 0, 33, 32, 1, 76, 89, 169, 156, 204, 86, 11, 170, 102,
                  207, 133, 40, 85, 120, 207, 126, 45, 25, 252, 104, 195, 34, 48, 19, 4, 131, 113, 54, 122, 179, 72, 3,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7,
                  112, 97, 99, 107, 97, 103, 101, 17, 97, 117, 116, 104, 111, 114, 105, 122, 101, 95, 117, 112, 103,
                  114, 97, 100, 101, 0, 3, 1, 0, 0, 1, 1, 0, 1, 2, 0, 6, 3, 147, 2, 161, 28, 235, 11, 6, 0, 0, 0, 9, 1,
                  0, 2, 2, 2, 12, 3, 14, 20, 5, 34, 6, 7, 40, 71, 8, 111, 32, 10, 143, 1, 16, 12, 159, 1, 74, 15, 233,
                  1, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 9, 0, 1, 0, 0, 8, 1, 1, 0, 0, 5, 1, 1, 0, 0, 7, 2,
                  1, 0, 0, 1, 3, 2, 1, 3, 1, 65, 1, 66, 4, 98, 97, 115, 101, 2, 102, 49, 2, 102, 50, 10, 102, 114, 105,
                  101, 110, 100, 95, 102, 117, 110, 13, 102, 114, 105, 101, 110, 100, 95, 109, 111, 100, 117, 108, 101,
                  14, 110, 111, 110, 95, 112, 117, 98, 108, 105, 99, 95, 102, 117, 110, 6, 112, 108, 117, 115, 95, 49,
                  8, 114, 101, 116, 117, 114, 110, 95, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 1, 4, 9, 0, 1, 2, 2, 3, 1, 4, 9, 0, 0, 1, 0, 0, 0, 2,
                  6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 4, 11, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 22, 2, 2, 3, 0, 0,
                  0, 2, 11, 0, 2, 3, 0, 0, 0, 1, 9, 11, 0, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 12, 2, 5, 7, 11, 1, 12, 2,
                  11, 2, 2, 0, 6, 0, 137, 2, 161, 28, 235, 11, 6, 0, 0, 0, 8, 1, 0, 4, 2, 4, 6, 3, 10, 25, 5, 35, 3, 7,
                  38, 89, 8, 127, 32, 10, 159, 1, 8, 12, 167, 1, 62, 0, 6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 9,
                  0, 1, 0, 0, 7, 1, 1, 0, 0, 8, 1, 1, 0, 1, 5, 1, 1, 0, 0, 1, 3, 1, 65, 4, 98, 97, 115, 101, 6, 102,
                  105, 101, 108, 100, 49, 6, 102, 105, 101, 108, 100, 50, 11, 102, 114, 105, 101, 110, 100, 95, 99, 97,
                  108, 108, 10, 102, 114, 105, 101, 110, 100, 95, 102, 117, 110, 13, 102, 114, 105, 101, 110, 100, 95,
                  109, 111, 100, 117, 108, 101, 14, 110, 111, 110, 95, 112, 117, 98, 108, 105, 99, 95, 102, 117, 110, 6,
                  112, 108, 117, 115, 95, 49, 8, 114, 101, 116, 117, 114, 110, 95, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 9, 0, 0, 1, 0, 0, 0,
                  3, 6, 1, 0, 0, 0, 0, 0, 0, 0, 17, 4, 2, 1, 1, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0,
                  2, 11, 0, 2, 3, 1, 0, 0, 0, 4, 11, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 22, 2, 0, 212, 1, 161, 28, 235, 11,
                  6, 0, 0, 0, 6, 1, 0, 4, 3, 4, 15, 5, 19, 3, 7, 22, 112, 8, 134, 1, 32, 12, 166, 1, 16, 0, 3, 0, 1, 0,
                  4, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 3, 11, 102, 114, 105, 101, 110, 100, 95, 99, 97, 108,
                  108, 13, 102, 114, 105, 101, 110, 100, 95, 109, 111, 100, 117, 108, 101, 53, 105, 95, 99, 97, 110, 95,
                  99, 97, 108, 108, 95, 102, 117, 110, 115, 95, 105, 110, 95, 111, 116, 104, 101, 114, 95, 109, 111,
                  100, 117, 108, 101, 115, 95, 116, 104, 97, 116, 95, 97, 108, 114, 101, 97, 100, 121, 95, 101, 120,
                  105, 115, 116, 101, 100, 10, 110, 101, 119, 95, 109, 111, 100, 117, 108, 101, 20, 116, 104, 105, 115,
                  95, 105, 115, 95, 97, 95, 110, 101, 119, 95, 109, 111, 100, 117, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 0,
                  0, 2, 17, 2, 2, 0, 0, 1, 53, 142, 184, 77, 104, 181, 205, 14, 156, 234, 176, 29, 183, 184, 8, 149,
                  164, 28, 204, 175, 168, 166, 230, 49, 210, 238, 131, 124, 112, 222, 232, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 112, 97, 99, 107, 97,
                  103, 101, 14, 99, 111, 109, 109, 105, 116, 95, 117, 112, 103, 114, 97, 100, 101, 0, 2, 1, 0, 0, 2, 1,
                  0, 141, 177, 237, 136, 186, 10, 28, 176, 34, 134, 192, 181, 45, 54, 40, 97, 168, 87, 117, 144, 236, 2,
                  79, 221, 224, 194, 158, 252, 203, 202, 197, 227, 1, 215, 53, 249, 7, 18, 230, 201, 164, 211, 133, 113,
                  58, 162, 19, 190, 146, 232, 0, 177, 223, 19, 51, 239, 53, 172, 65, 76, 124, 172, 86, 240, 2, 2, 0, 0,
                  0, 0, 0, 0, 0, 32, 56, 226, 129, 6, 160, 66, 6, 102, 82, 115, 50, 70, 39, 163, 72, 235, 205, 108, 168,
                  55, 50, 35, 35, 88, 178, 105, 236, 29, 137, 121, 180, 27, 141, 177, 237, 136, 186, 10, 28, 176, 34,
                  134, 192, 181, 45, 54, 40, 97, 168, 87, 117, 144, 236, 2, 79, 221, 224, 194, 158, 252, 203, 202, 197,
                  227, 1, 0, 0, 0, 0, 0, 0, 0, 16, 39, 0, 0, 0, 0, 0, 0, 0]
        assert list(actual) == expect
